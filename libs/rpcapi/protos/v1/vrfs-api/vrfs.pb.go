// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: libs/rpcapi/protos/v1/vrfs-api/vrfs.proto

package vrfs_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PingRequest is the request message containing the user's name.
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PingReply is the response message containing the greetings
type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// UploadBucketRequest is the request message for a file bucket where to upload files, if granted
type UploadBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID to which a file storage bucket is to be associated
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The fileset ID for which a file storage bucket is requested
	FilesetId string `protobuf:"bytes,2,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
}

func (x *UploadBucketRequest) Reset() {
	*x = UploadBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBucketRequest) ProtoMessage() {}

func (x *UploadBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBucketRequest.ProtoReflect.Descriptor instead.
func (*UploadBucketRequest) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{2}
}

func (x *UploadBucketRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UploadBucketRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

// UploadBucketResponse is the response message to a file bucket request
type UploadBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created file storage bucket ID where the fileset can be uploaded
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *UploadBucketResponse) Reset() {
	*x = UploadBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBucketResponse) ProtoMessage() {}

func (x *UploadBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBucketResponse.ProtoReflect.Descriptor instead.
func (*UploadBucketResponse) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{3}
}

func (x *UploadBucketResponse) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

// UploadDoneRequest is the request message for confirming files have been uploaded to a remote file storage
type UploadDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID to which the fileset belongs
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// ID of the fileset to which the file belongs
	FilesetId string `protobuf:"bytes,2,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// The MerkleTree root hash of the fileset, generated & stored by the client
	MtRoot []byte `protobuf:"bytes,3,opt,name=mt_root,json=mtRoot,proto3" json:"mt_root,omitempty"`
}

func (x *UploadDoneRequest) Reset() {
	*x = UploadDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDoneRequest) ProtoMessage() {}

func (x *UploadDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDoneRequest.ProtoReflect.Descriptor instead.
func (*UploadDoneRequest) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{4}
}

func (x *UploadDoneRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UploadDoneRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *UploadDoneRequest) GetMtRoot() []byte {
	if x != nil {
		return x.MtRoot
	}
	return nil
}

// UploadDoneResponse is the request message for confirming files have been uploaded to a remote file storage
type UploadDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Confirmation code of the upload process to the VRFS & FS services
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional informative message extending the status code
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UploadDoneResponse) Reset() {
	*x = UploadDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDoneResponse) ProtoMessage() {}

func (x *UploadDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDoneResponse.ProtoReflect.Descriptor instead.
func (*UploadDoneResponse) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{5}
}

func (x *UploadDoneResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UploadDoneResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// DownloadFileInfoRequest is the request message for retrieving the necessary info to download and verify the consistency of a file
type DownloadFileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID to which the fileset belongs
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// ID of the fileset to which the file belongs
	FilesetId string `protobuf:"bytes,2,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// Index number of the file within the fileset
	FileIndex int32 `protobuf:"varint,3,opt,name=file_index,json=fileIndex,proto3" json:"file_index,omitempty"`
}

func (x *DownloadFileInfoRequest) Reset() {
	*x = DownloadFileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileInfoRequest) ProtoMessage() {}

func (x *DownloadFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileInfoRequest.ProtoReflect.Descriptor instead.
func (*DownloadFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadFileInfoRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DownloadFileInfoRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *DownloadFileInfoRequest) GetFileIndex() int32 {
	if x != nil {
		return x.FileIndex
	}
	return 0
}

// DownloadFileInfoResponse is the response message for the download of a file and its consistency check based on MerkleTree proofs
type DownloadFileInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The FS bucket ID from which the file can be downloaded
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// The MerkleTree proof to confirm the expected file hash consistency once downloaded
	MtProof *MTProof `protobuf:"bytes,2,opt,name=mt_proof,json=mtProof,proto3" json:"mt_proof,omitempty"`
}

func (x *DownloadFileInfoResponse) Reset() {
	*x = DownloadFileInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileInfoResponse) ProtoMessage() {}

func (x *DownloadFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileInfoResponse.ProtoReflect.Descriptor instead.
func (*DownloadFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadFileInfoResponse) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *DownloadFileInfoResponse) GetMtProof() *MTProof {
	if x != nil {
		return x.MtProof
	}
	return nil
}

// MTProof is a Merkle Tree proof message
type MTProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sibling nodes to the Merkle Tree path of the data block
	Siblings [][]byte `protobuf:"bytes,1,rep,name=siblings,proto3" json:"siblings,omitempty"`
	// Path variable indicating whether the neighbor is on the left or right
	Path uint32 `protobuf:"varint,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MTProof) Reset() {
	*x = MTProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTProof) ProtoMessage() {}

func (x *MTProof) ProtoReflect() protoreflect.Message {
	mi := &file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTProof.ProtoReflect.Descriptor instead.
func (*MTProof) Descriptor() ([]byte, []int) {
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP(), []int{8}
}

func (x *MTProof) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

func (x *MTProof) GetPath() uint32 {
	if x != nil {
		return x.Path
	}
	return 0
}

var File_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto protoreflect.FileDescriptor

var file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x72, 0x66,
	0x73, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x33,
	0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x46, 0x0a,
	0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x61, 0x0a, 0x18, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x4d, 0x54,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x07, 0x6d, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x39,
	0x0a, 0x07, 0x4d, 0x54, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x32, 0xa4, 0x02, 0x0a, 0x1b, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x17,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x61, 0x38, 0x38, 0x61, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72, 0x66,
	0x73, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescOnce sync.Once
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescData = file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDesc
)

func file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescGZIP() []byte {
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescOnce.Do(func() {
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescData)
	})
	return file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDescData
}

var file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_goTypes = []interface{}{
	(*PingRequest)(nil),              // 0: vrfs.PingRequest
	(*PingReply)(nil),                // 1: vrfs.PingReply
	(*UploadBucketRequest)(nil),      // 2: vrfs.UploadBucketRequest
	(*UploadBucketResponse)(nil),     // 3: vrfs.UploadBucketResponse
	(*UploadDoneRequest)(nil),        // 4: vrfs.UploadDoneRequest
	(*UploadDoneResponse)(nil),       // 5: vrfs.UploadDoneResponse
	(*DownloadFileInfoRequest)(nil),  // 6: vrfs.DownloadFileInfoRequest
	(*DownloadFileInfoResponse)(nil), // 7: vrfs.DownloadFileInfoResponse
	(*MTProof)(nil),                  // 8: vrfs.MTProof
}
var file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_depIdxs = []int32{
	8, // 0: vrfs.DownloadFileInfoResponse.mt_proof:type_name -> vrfs.MTProof
	2, // 1: vrfs.VerifiableRemoteFileStorage.UploadBucket:input_type -> vrfs.UploadBucketRequest
	4, // 2: vrfs.VerifiableRemoteFileStorage.UploadDone:input_type -> vrfs.UploadDoneRequest
	6, // 3: vrfs.VerifiableRemoteFileStorage.DownloadFileInfo:input_type -> vrfs.DownloadFileInfoRequest
	0, // 4: vrfs.VerifiableRemoteFileStorage.Ping:input_type -> vrfs.PingRequest
	3, // 5: vrfs.VerifiableRemoteFileStorage.UploadBucket:output_type -> vrfs.UploadBucketResponse
	5, // 6: vrfs.VerifiableRemoteFileStorage.UploadDone:output_type -> vrfs.UploadDoneResponse
	7, // 7: vrfs.VerifiableRemoteFileStorage.DownloadFileInfo:output_type -> vrfs.DownloadFileInfoResponse
	1, // 8: vrfs.VerifiableRemoteFileStorage.Ping:output_type -> vrfs.PingReply
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_init() }
func file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_init() {
	if File_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_goTypes,
		DependencyIndexes: file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_depIdxs,
		MessageInfos:      file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_msgTypes,
	}.Build()
	File_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto = out.File
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_rawDesc = nil
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_goTypes = nil
	file_libs_rpcapi_protos_v1_vrfs_api_vrfs_proto_depIdxs = nil
}
